#
#
#    Nawabs -- The Anti package manager for Nim
#        (c) Copyright 2016 Andreas Rumpf
#
#    See the file "license.txt", included in this
#    distribution, for details about the copyright.


## Recipe handling. A 'recipe' is a NimScript that produces the same build.

import os, osproc, strutils
import osutils

proc projToKey(proj: string): string =
  result = newStringOfCap(proj.len)
  var pendingDash = false
  for c in proj:
    if c in {'A'..'Z', 'a'..'z', '0'..'9'}:
      if pendingDash:
        if result.len > 0: result.add '_'
        pendingDash = false
      result.add toLowerAscii(c)
    else:
      pendingDash = true
  result.add ".nims"

const
  recipesDirName* = "recipes_"
  utils = "recipe_utils"

template recipesDir(workspace): untyped = workspace / recipesDirName

proc toRecipe*(workspace, package: string): string =
  recipesDir(workspace) / package.projToKey

proc gitExec(dir, proj: string): bool {.discardable.} =
  withDir dir:
    let (outp, exitCode) = execCmdEx("git " & proj)
    result = "nothing added to commit" in outp or exitCode == 0

proc writeHelper() =
  writeFile(utils & ".nim", """
# Generated by Nawabs.

import ospaths

const paramIdx = when defined(nimvm): 3 else: 1
let pinnedBuild = paramCount() >= paramIdx and paramStr(paramIdx) == "pinned"
let updatedBuild = paramCount() >= paramIdx and paramStr(paramIdx) == "update"

template withDir*(dir, body) =
  let oldDir = getCurrentDir()
  try:
    setCurrentDir(dir)
    body
  finally:
    setCurrentDir(oldDir)

template gitDep*(name, url, commit) =
  let g = name / ".git"
  if not dirExists(g): exec "git clone " & url
  withDir "$1":
    if pinnedBuild:
      exec "git checkout " & commit
    elif updatedBuild:
      exec "git pull"

template hgDep*(name, url, commit) =
  if not dirExists("$1/.hg"): exec "hg clone $2"
  withDir "$1":
    if pinnedBuild:
      exec "hg update -c $3"
    elif updatedBuild:
      exec "hg pull"
""")

proc nailDeps(proj, val: string; deps: seq[string]): string =
  result = """
# Generated by Nawabs.

import $1

""" % utils
  for d in deps:
    if dirExists(d / ".git"):
      withDir d:
        let url = execProcess("git remote get-url origin").strip()
        let commit = execProcess("git log -1 --pretty=format:%H").strip()
        result.addf("""gitDep("$1", "$2", "$3")""", d, url, commit)
    elif dirExists(d / ".hg"):
      withDir d:
        let url = execProcess("hg paths " & d).strip()
        let commit = execProcess("hg id -i").strip()
        result.addf("""hgDep("$1", "$2", "$3")""", d, url, commit)
  result.add "\n\nwithDir \"" & proj & "\":\n"
  result.add "  exec \"\"\"" & val & "\"\"\"\n"

proc init*(workspace: string) =
  let dir = recipesDir(workspace)
  if not dirExists(dir):
    createDir dir
    withDir dir:
      exec "git init"
      writeHelper()
      exec "git add " & utils & ".nim"
      exec "git commit -am \"nawabs: first commit\""

proc writeRecipe*(workspace, proj, val: string; path: seq[string]) =
  try:
    let dir = recipesDir(workspace)
    let dest = dir / proj.projToKey
    writeFile dest, nailDeps(proj, val, path)
    gitExec dir, "add " & dest
    gitExec dir, "commit -am \"nawabs: automatic commit\""
  except IOError:
    discard "failure to write a recipe does no harm"
